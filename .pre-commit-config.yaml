# config file for pre-commit: https://pre-commit.com/
#
# These plugins are run before each git commit, but can also be run on demand using:
# `pre-commit run --all-files`
#
# To install the hooks to be automatically run by git when committing, run:
# `pre-commit install --install-hooks`
#
# This is the preferred way to run all of these tools -- clang-format, clang-tidy,
# cppcheck, cmake-format, etc -- because it is convenient to define configuration
# for all of them in this single file, and to define the order in which they should
# be run (we always auto-format *before* linting). In general, any tools that are
# available as pre-commit plugins are run using pre-commit, and for these tools, any
# configuration options settable as command-line arguments are specified in this file
# using the `args:` key. When a tool requires configuration file(s), then if it is
# possible to specify a custom filepath, we put the config file(s) in the `config/`
# directory and specify that path as a command-line argument. Only if specifying a
# custom config file is not possible do we resort to putting it in the repo root.
#
# Note that running pre-commit may change files in the source tree. If a hook changes
# files, the pre-commit run exits with a failure code, and if a git commit was in
# progress, it is aborted.

default_language_version:
  python: python3

default_install_hook_types: [pre-commit, pre-push, commit-msg]

default_stages: [commit, push]

fail_fast: false

minimum_pre_commit_version: 2.20.0

ci:
  skip: [cppcheck, check-jsonschema] # clang-tidy
  autofix_commit_msg: 'style: pre-commit autofixes [skip ci]'
  autoupdate_commit_msg: 'chore: pre-commit autoupdate [skip ci]'

repos:

# pre-commit configuration meta-checks
- repo: meta
  hooks:
  - id: check-hooks-apply
    always_run: true
  - id: check-useless-excludes
    always_run: true

# Local scripts
- repo: local
  hooks:
    # create logs directory
    # if a hook with a log file specified fails, the logs directory must exist or another error will be thrown
  - id: logs-dir
    name: Create logs directory
    entry: cmake -E make_directory logs/pre-commit
    language: system
    always_run: true
    pass_filenames: false

    # create build directory for cppcheck
  - id: cppcheck-build-dir
    name: Create cache dir for cppcheck
    entry: cmake -E make_directory Builds/cppcheck
    language: system
    always_run: true
    pass_filenames: false

    # only .yml files allowed in .github/workflows/
  - id: yml-xtn-in-workflow-dir
    name: Ensure only .yml files in .github/workflows/
    entry: Files in the .github/workflows/ directory must have the .yml extension
    language: fail
    files: .github/workflows/.*(?<!\.yml)$

# Insert license header
- repo: https://github.com/Lucas-C/pre-commit-hooks
  rev: v1.5.4
  hooks:
    # we have to run this step once for each different comment-style
  - id: insert-license
    name: Insert license header in C++ source files
    args: [--license-filepath=data/license-header.txt, --comment-style=/*| *| */, --detect-license-in-X-top-lines=16]
    types_or: [c, c++, objective-c]
  - id: insert-license
    name: Insert license header in CMake and shell files
    args: [--license-filepath=data/license-header.txt, --comment-style=#, --detect-license-in-X-top-lines=16]
    types_or: [cmake, shell, python, yaml, toml, ini]
  - id: insert-license
    name: Insert license header in other config files
    args: [--license-filepath=data/license-header.txt, --comment-style=#, --detect-license-in-X-top-lines=16]
    files: .envrc|.bumpversion.cfg|.editorconfig|.gitignore|.gitattributes|.clang-format|.clang-tidy|.pre-commit-config.yaml

# C++ formatting & linting
- repo: https://github.com/finsberg/clang-format-docs
  rev: v0.2.2
  hooks:
  - id: clang-format-docs
    additional_dependencies: [clang-format]
    files: '\.(md|h|doc)$'

- repo: https://github.com/pocc/pre-commit-hooks
  rev: v1.3.5
  hooks:

  - id: clang-format
    args: [--no-diff, --style=file, -i]
    additional_dependencies: [clang-format]

  - id: cppcheck
    args: [--cppcheck-build-dir=Builds/cppcheck, --quiet, --inline-suppr, --std=c++20, --language=c++, --force, --enable=warning, --enable=style, --enable=performance, --enable=portability, --suppress=missingIncludeSystem, --suppress=preprocessorErrorDirective, --suppress=unknownMacro]
    log_file: logs/pre-commit/cppcheck.log
    types_or: [c, c++]
    exclude: .mm

  - id: cpplint
    args: [--verbose=0, '--filter=-whitespace,-legal,-build/include,+build/include_order,-build/c++11,-build/header_guard,-build/explicit_make_pair,-runtime/references,-readability/braces,-readability/todo']
    log_file: logs/pre-commit/cpplint.log
    additional_dependencies: [cpplint]

  # - id: clang-tidy
  #   args: [-p=Builds/compile-commands]
  #   log_file: logs/pre-commit/clang-tidy.log
  #   additional_dependencies: [clang-tidy]

# CMake formatting & linting
- repo: https://github.com/cheshirekow/cmake-format-precommit
  rev: v0.6.13
  hooks:
  - id: cmake-format
    args: [--config-files, linfra/config/.cmake-format.json, --in-place]
  - id: cmake-lint
    args: [--config-files, linfra/config/.cmake-format.json, --disabled-codes, E1120]
    log_file: logs/pre-commit/cmake-lint.log

# General
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.5.0
  hooks:
  - id: check-added-large-files
    args: [--maxkb=64]
  - id: check-case-conflict
  - id: check-json
  - id: check-merge-conflict
  - id: check-shebang-scripts-are-executable
  - id: check-vcs-permalinks
  - id: check-yaml
  - id: destroyed-symlinks
  - id: detect-private-key
  - id: end-of-file-fixer
    exclude: tests/data/lines.txt
  - id: fix-byte-order-marker
  - id: mixed-line-ending
    args: [--fix=lf]
  - id: pretty-format-json
    args: [--autofix, --indent=2]
  - id: trailing-whitespace
    args: [--markdown-linebreak-ext=md]

  # text file linters
- repo: https://github.com/sirosen/texthooks
  rev: 0.6.4
  hooks:
  - id: fix-ligatures
  - id: fix-smartquotes
  - id: forbid-bidi-controls
  # Markdown
- repo: https://github.com/igorshubovych/markdownlint-cli
  rev: v0.39.0
  hooks:
  - id: markdownlint-fix
    args: [--disable, MD033, MD010, MD013]
    # exclude: CHANGELOG.md
- repo: https://github.com/codingjoe/relint
  rev: 3.1.0
  hooks:
  - id: relint
    args: [-c, linfra/config/.relint.yml]
    log_file: logs/pre-commit/relint.log
    verbose: true

  # various other formatters
- repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks.git
  rev: v2.12.0
  hooks:
  - id: pretty-format-yaml
    args: [--autofix, --preserve-quotes]

  # validate JSON/YAML schemas
- repo: https://github.com/sirosen/check-jsonschema
  rev: 0.27.4
  hooks:
  - id: check-github-workflows
  - id: check-dependabot

# Git linting
- repo: https://github.com/jorisroovers/gitlint
  rev: v0.19.1
  hooks:
  - id: gitlint
    args: [--config, linfra/config/.gitlint, --msg-filename]
    always_run: true
- repo: https://github.com/jumanjihouse/pre-commit-hooks.git
  rev: 3.0.0
  hooks:
  - id: check-mailmap
  - id: git-check

# check editorconfig rules
- repo: https://github.com/editorconfig-checker/editorconfig-checker.python
  rev: 2.7.3
  hooks:
  - id: editorconfig-checker
    args: [-ignore-defaults, -config, linfra/config/.ecrc]

# sign commit
- repo: https://github.com/mattlqx/pre-commit-sign
  rev: v1.1.3
  hooks:
  - id: sign-commit
